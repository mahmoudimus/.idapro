# generated by mutilz cli at 2025-02-18 10:39:47
import dataclasses
import functools

import ida_bytes
import ida_funcs
import ida_kernwin
import idaapi
import mutilz.actions as actions
import mutilz.helpers.ida as ida_helpers


@dataclasses.dataclass
class RemoveHltActionHandler(ida_helpers.BaseActionHandler):
    """Remove HLT instructions."""

    action_name: str = "mutilz:remove_hlt"
    action_label: str = "Remove HLT Instructions"
    icon: int = 51

    def activate(self, ctx):
        ea = idaapi.get_screen_ea()
        self.replace_hlt_with(ea)  # Call the helper function
        return 1

    def update(self, ctx):
        return (
            idaapi.AST_ENABLE_FOR_WIDGET
            if ctx.widget_type == idaapi.BWN_DISASM
            else idaapi.AST_DISABLE_FOR_WIDGET
        )

    @staticmethod
    def replace_hlt_with(ea, repl=0x90):
        """Replaces HLT instructions with a specified byte (default: NOP)."""
        func = ida_funcs.get_func(ea)
        if func:
            start = func.start_ea
            end = func.end_ea
        else:
            print("No function found at the current address.")
            end = ida_kernwin.ask_addr(ea, "Enter end address")
            if end is None:
                print("Analysis cancelled.")
                return

        for addr in range(start, end):
            if ida_bytes.get_byte(addr) == 0xF4:  # HLT instruction
                print(f"Patching HLT at: {hex(addr)}")
                ida_bytes.patch_byte(addr, repl)


class RemoveHltAction(actions.action_t, metaclass=ida_helpers.HookedActionMeta):
    uihook_class = functools.partial(
        ida_helpers.PopUpHook,
        RemoveHltActionHandler,
        ida_helpers.is_disassembly_widget,
    )


# retrieve the action
def get_action() -> actions.action_t:
    return RemoveHltAction()
